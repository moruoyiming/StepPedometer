package com.calypso.pedometer.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.calypso.pedometer.greendao.entry.StepInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_INFO".
*/
public class StepInfoDao extends AbstractDao<StepInfo, Long> {

    public static final String TABLENAME = "STEP_INFO";

    /**
     * Properties of entity StepInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StepCount = new Property(1, long.class, "stepCount", false, "STEPCOUNT");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property CreteTime = new Property(3, String.class, "creteTime", false, "CRETETIME");
        public final static Property PreviousStepCount = new Property(4, long.class, "previousStepCount", false, "PREVIOUSSTEP");
        public final static Property StepTotal = new Property(5, long.class, "stepTotal", false, "STEPTOTAL");
    }


    public StepInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StepInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STEPCOUNT\" INTEGER NOT NULL ," + // 1: stepCount
                "\"DATE\" TEXT," + // 2: date
                "\"CRETETIME\" TEXT," + // 3: creteTime
                "\"PREVIOUSSTEP\" INTEGER NOT NULL ," + // 4: previousStepCount
                "\"STEPTOTAL\" INTEGER NOT NULL );"); // 5: stepTotal
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_STEP_INFO_DATE ON STEP_INFO" +
                " (\"DATE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepCount());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String creteTime = entity.getCreteTime();
        if (creteTime != null) {
            stmt.bindString(4, creteTime);
        }
        stmt.bindLong(5, entity.getPreviousStepCount());
        stmt.bindLong(6, entity.getStepTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepCount());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String creteTime = entity.getCreteTime();
        if (creteTime != null) {
            stmt.bindString(4, creteTime);
        }
        stmt.bindLong(5, entity.getPreviousStepCount());
        stmt.bindLong(6, entity.getStepTotal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepInfo readEntity(Cursor cursor, int offset) {
        StepInfo entity = new StepInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // stepCount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creteTime
            cursor.getLong(offset + 4), // previousStepCount
            cursor.getLong(offset + 5) // stepTotal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStepCount(cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreteTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPreviousStepCount(cursor.getLong(offset + 4));
        entity.setStepTotal(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
